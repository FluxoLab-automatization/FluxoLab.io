import { Repository } from 'typeorm';
import { Queue } from 'bull';
import { Execution, ExecutionStep, Workflow, WorkflowVersion } from '../../shared/entities';
import { SystemEvent, IdempotencyKey, DistributedLock, RetryQueue } from './entities';
import { EventProcessor } from './processors/event.processor';
import { HumanTaskProcessor } from './processors/human-task.processor';
import { EvidenceProcessor } from './processors/evidence.processor';
import { UsageProcessor } from './processors/usage.processor';
import { AuditProcessor } from './processors/audit.processor';
export declare class EngineService {
    private executionRepository;
    private executionStepRepository;
    private workflowRepository;
    private workflowVersionRepository;
    private systemEventRepository;
    private idempotencyKeyRepository;
    private distributedLockRepository;
    private retryQueueRepository;
    private eventsQueue;
    private workflowsQueue;
    private humanTasksQueue;
    private evidenceQueue;
    private usageQueue;
    private auditQueue;
    private eventProcessor;
    private humanTaskProcessor;
    private evidenceProcessor;
    private usageProcessor;
    private auditProcessor;
    private readonly logger;
    constructor(executionRepository: Repository<Execution>, executionStepRepository: Repository<ExecutionStep>, workflowRepository: Repository<Workflow>, workflowVersionRepository: Repository<WorkflowVersion>, systemEventRepository: Repository<SystemEvent>, idempotencyKeyRepository: Repository<IdempotencyKey>, distributedLockRepository: Repository<DistributedLock>, retryQueueRepository: Repository<RetryQueue>, eventsQueue: Queue, workflowsQueue: Queue, humanTasksQueue: Queue, evidenceQueue: Queue, usageQueue: Queue, auditQueue: Queue, eventProcessor: EventProcessor, humanTaskProcessor: HumanTaskProcessor, evidenceProcessor: EvidenceProcessor, usageProcessor: UsageProcessor, auditProcessor: AuditProcessor);
    startWorkflowExecution(workflowId: string, triggerData: any, context: {
        tenantId: string;
        workspaceId: string;
        userId?: string;
        correlationId?: string;
        traceId?: string;
    }): Promise<string>;
    processWorkflowExecution(runId: string, workflowId: string, versionId: string, triggerData: any, context: any): Promise<void>;
    processNode(runId: string, nodeId: string, nodeData: any, inputData: any, context: any): Promise<any>;
    private processWebhookNode;
    private processConnectorNode;
    private processAiNode;
    private processHumanTaskNode;
    private processTransformNode;
    private processConditionNode;
    emitEvent(eventType: string, payload: any): Promise<void>;
    private calculateChecksum;
    checkIdempotency(tenantId: string, workspaceId: string, scope: string, key: string): Promise<boolean>;
    createIdempotencyKey(tenantId: string, workspaceId: string, scope: string, key: string, runId: string, expiresAt: Date): Promise<void>;
    acquireLock(lockKey: string, lockedBy: string, ttlSeconds: number): Promise<boolean>;
    releaseLock(lockKey: string, lockedBy: string): Promise<void>;
    addToRetryQueue(runId: string, stepId: string, errorMessage: string, maxRetries?: number): Promise<void>;
    processRetryQueue(): Promise<void>;
}
